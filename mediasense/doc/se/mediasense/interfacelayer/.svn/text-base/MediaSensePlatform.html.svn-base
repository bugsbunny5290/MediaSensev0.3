<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_10) on Tue Jul 23 11:53:08 CEST 2013 -->
<title>MediaSensePlatform</title>
<meta name="date" content="2013-07-23">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="MediaSensePlatform";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../se/mediasense/interfacelayer/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/MediaSensePlatform.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../se/mediasense/interfacelayer/MediaSenseApplication.html" title="class in se.mediasense.interfacelayer"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../se/mediasense/interfacelayer/Persistence.html" title="class in se.mediasense.interfacelayer"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?se/mediasense/interfacelayer/MediaSensePlatform.html" target="_top">Frames</a></li>
<li><a href="MediaSensePlatform.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">se.mediasense.interfacelayer</div>
<h2 title="Class MediaSensePlatform" class="title">Class MediaSensePlatform</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>se.mediasense.interfacelayer.MediaSensePlatform</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public final class <span class="strong">MediaSensePlatform</span>
extends java.lang.Object</pre>
<div class="block">The MediaSense platform itself, which exposes all functionality towards the
 application developers. All activity using the MediaSense platform must
 orginate here. <p>The constructor
 <a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#MediaSensePlatform(se.mediasense.interfacelayer.MediaSenseApplication)"><code>MediaSensePlatform</code></a>
 requires that a default <code>se.interfacelayer.MediaSenseApplication</code>
 must be specified as an argument to the constructor <p>Where no other
 <code>MediaSenseListener</code> is specified for the a
 specfic <code>MediaSenseMessage</code> then the messages
 are sent to the defualt listener for processing. <p>The platform must be
 <a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#MediaSensePlatform(se.mediasense.interfacelayer.MediaSenseApplication)"><code>Constructed</code></a> and
 <a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#init(java.lang.String, int, int)"><code>Initialized</code></a> before
 becoming accessible.</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#MediaSensePlatform(se.mediasense.interfacelayer.MediaSenseApplication)">MediaSensePlatform</a></strong>(<a href="../../../se/mediasense/interfacelayer/MediaSenseApplication.html" title="class in se.mediasense.interfacelayer">MediaSenseApplication</a>&nbsp;app)</code>
<div class="block">This is the only constructor for the MediaSensePlatform API.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>se.mediasense.distribution.Deleter</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#delete(se.mediasense.distribution.UCI)">delete</a></strong>(se.mediasense.distribution.UCI&nbsp;uci)</code>
<div class="block">The DELETE action, which deletes an UCI</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>se.mediasense.distribution.Getter</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#get(java.lang.String)">get</a></strong>(java.lang.String&nbsp;uci)</code>
<div class="block">The GET primitive action, which fetches the value from another entity.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>se.mediasense.distribution.Getter</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#get(se.mediasense.distribution.UCI)">get</a></strong>(se.mediasense.distribution.UCI&nbsp;uci)</code>
<div class="block">The GET primitive action, which fetches the value from another entity.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>se.mediasense.addinlayer.AddInManager</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#getAddInManager()">getAddInManager</a></strong>()</code>
<div class="block">Returns the add-in manager, which handles loading and unloading of
 add-ins.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>se.mediasense.disseminationlayer.disseminationcore.DisseminationCore</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#getDisseminationCore()">getDisseminationCore</a></strong>()</code>
<div class="block">Returns the dissemination core, which is used to call primitive functions
 directly</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>se.mediasense.disseminationlayer.communication.MediaSenseHost</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#getLocalHost()">getLocalHost</a></strong>()</code>
<div class="block">Returns the localhost This is implementation specific, however for most
 cases, the getHostID is sufficient identification for the host.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#init()">init</a></strong>()</code>
<div class="block">Initializes the Distributed MediaSense platform using the default boostrap and port.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#init(int)">init</a></strong>(int&nbsp;localport)</code>
<div class="block">Initializes the Distributed MediaSense platform using the default boostrap and port.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#init(java.lang.String, int, int)">init</a></strong>(java.lang.String&nbsp;boostrapaddress,
    int&nbsp;bootstrapport,
    int&nbsp;localport)</code>
<div class="block">Initializes the Distributed MediaSense platform.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#isInitalized()">isInitalized</a></strong>()</code>
<div class="block">Checks whether the MediaSensePlatform has been successfully initialized,
 started, and is currently running</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#main(java.lang.String[])">main</a></strong>(java.lang.String[]&nbsp;args)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#notify(se.mediasense.distribution.UCI, java.io.Serializable, se.mediasense.disseminationlayer.communication.MediaSenseHost)">notify</a></strong>(se.mediasense.distribution.UCI&nbsp;uci,
      java.io.Serializable&nbsp;value,
      se.mediasense.disseminationlayer.communication.MediaSenseHost&nbsp;destination)</code>
<div class="block">The NOTIFY primitive action, which sends a value back to a previously
 asking entity</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#registerListener(java.lang.String, se.mediasense.messages.MediaSenseListener)">registerListener</a></strong>(java.lang.String&nbsp;msgtype,
                se.mediasense.messages.MediaSenseListener&nbsp;listener)</code>
<div class="block">Registers an event listener with the API.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>se.mediasense.distribution.Registrator</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#registerUCI(java.lang.String)">registerUCI</a></strong>(java.lang.String&nbsp;uci)</code>
<div class="block">The REGISTER primitive action, which registers an UCI which can later be
 resolved and found by other MediaSenseHosts</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#removeListener(java.lang.String, se.mediasense.messages.MediaSenseListener)">removeListener</a></strong>(java.lang.String&nbsp;msgtype,
              se.mediasense.messages.MediaSenseListener&nbsp;listener)</code>
<div class="block">Removes or de-registers an event listener with the API.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>se.mediasense.distribution.Resolver</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#resolveUCI(java.lang.String)">resolveUCI</a></strong>(java.lang.String&nbsp;uci)</code>
<div class="block">The RESOLVE primitive action, which resolves an UCI to the node which
 owns the resource identified by this UCI</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#sendMessage(se.mediasense.messages.MediaSenseMessage)">sendMessage</a></strong>(se.mediasense.messages.MediaSenseMessage&nbsp;msg)</code>
<div class="block">Sends a <code>MediaSenseMessage</code> using the
 generic messaging interface.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#set(se.mediasense.distribution.UCI, java.io.Serializable)">set</a></strong>(se.mediasense.distribution.UCI&nbsp;uci,
   java.io.Serializable&nbsp;value)</code>
<div class="block">The SET primitive action, which fetches the value from another entity.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#shutdown()">shutdown</a></strong>()</code>
<div class="block">De-registers and shutsdown the entire platform along with network
 connectivity.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>se.mediasense.distribution.Updater</code></td>
<td class="colLast"><code><strong><a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#update(java.lang.String)">update</a></strong>(java.lang.String&nbsp;uci)</code>
<div class="block">The Update action, which updates an UCI which can later be
 resolved and found by other MediaSenseHosts</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="MediaSensePlatform(se.mediasense.interfacelayer.MediaSenseApplication)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>MediaSensePlatform</h4>
<pre>public&nbsp;MediaSensePlatform(<a href="../../../se/mediasense/interfacelayer/MediaSenseApplication.html" title="class in se.mediasense.interfacelayer">MediaSenseApplication</a>&nbsp;app)</pre>
<div class="block">This is the only constructor for the MediaSensePlatform API. The
 constructor, no initialization is done, use <b>init</b> to start the
 platform and establish network connectivity.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>app</code> - This is the
 <code>se.interfacelayer.MediaSenseApplication</code> for all messages. It is
 used when other message handlers are registered. Manage message specific
 handlers with
 <a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#registerListener(java.lang.String, se.mediasense.messages.MediaSenseListener)"><code>registerListener</code></a>
 and
 <a href="../../../se/mediasense/interfacelayer/MediaSensePlatform.html#removeListener(java.lang.String, se.mediasense.messages.MediaSenseListener)"><code>removeListener</code></a></dd></dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="shutdown()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>shutdown</h4>
<pre>public&nbsp;void&nbsp;shutdown()</pre>
<div class="block">De-registers and shutsdown the entire platform along with network
 connectivity. No applications are executable after this method has been
 called. All currently loaded addins are also unloaded.</div>
</li>
</ul>
<a name="init(java.lang.String, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>init</h4>
<pre>public&nbsp;boolean&nbsp;init(java.lang.String&nbsp;boostrapaddress,
           int&nbsp;bootstrapport,
           int&nbsp;localport)</pre>
<div class="block">Initializes the Distributed MediaSense platform. Must be called before
 using the any other functions.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>boostrapaddress</code> - This is the address of the bootstrap node</dd><dd><code>bootstrapport</code> - This is the listening port of the bootstrap node</dd><dd><code>localport</code> - This is the listening port of the node being created on this device</dd>
<dt><span class="strong">Returns:</span></dt><dd>true if successfully started</dd></dl>
</li>
</ul>
<a name="init()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>init</h4>
<pre>public&nbsp;boolean&nbsp;init()</pre>
<div class="block">Initializes the Distributed MediaSense platform using the default boostrap and port. 
 The current bootstrap address can be located on http://www.mediasense.se</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>true if successfully started</dd></dl>
</li>
</ul>
<a name="init(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>init</h4>
<pre>public&nbsp;boolean&nbsp;init(int&nbsp;localport)</pre>
<div class="block">Initializes the Distributed MediaSense platform using the default boostrap and port. 
 The current bootstrap address can be located on http://www.mediasense.se</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>localport</code> - This is the listening port of the node being created on this device</dd>
<dt><span class="strong">Returns:</span></dt><dd>true if successfully started</dd></dl>
</li>
</ul>
<a name="getDisseminationCore()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDisseminationCore</h4>
<pre>public&nbsp;se.mediasense.disseminationlayer.disseminationcore.DisseminationCore&nbsp;getDisseminationCore()</pre>
<div class="block">Returns the dissemination core, which is used to call primitive functions
 directly</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>the running dissemination core</dd></dl>
</li>
</ul>
<a name="getAddInManager()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getAddInManager</h4>
<pre>public&nbsp;se.mediasense.addinlayer.AddInManager&nbsp;getAddInManager()</pre>
<div class="block">Returns the add-in manager, which handles loading and unloading of
 add-ins.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>the add-in manager</dd></dl>
</li>
</ul>
<a name="isInitalized()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isInitalized</h4>
<pre>public&nbsp;boolean&nbsp;isInitalized()</pre>
<div class="block">Checks whether the MediaSensePlatform has been successfully initialized,
 started, and is currently running</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>true if the platform is running</dd></dl>
</li>
</ul>
<a name="resolveUCI(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>resolveUCI</h4>
<pre>public&nbsp;se.mediasense.distribution.Resolver&nbsp;resolveUCI(java.lang.String&nbsp;uci)</pre>
<div class="block">The RESOLVE primitive action, which resolves an UCI to the node which
 owns the resource identified by this UCI <p>This call is asynchronous or synchronous.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>uci</code> - the UCI to be resolved</dd>
<dt><span class="strong">Returns:</span></dt><dd>the resolver object</dd></dl>
</li>
</ul>
<a name="registerUCI(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>registerUCI</h4>
<pre>public&nbsp;se.mediasense.distribution.Registrator&nbsp;registerUCI(java.lang.String&nbsp;uci)</pre>
<div class="block">The REGISTER primitive action, which registers an UCI which can later be
 resolved and found by other MediaSenseHosts <p>This call is asynchronous or synchronous.
 <p>This method assumes that the resources is owned by the local
 <code>MediaSenseHost</code></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>uci</code> - - the UCI to be registered</dd>
<dt><span class="strong">Returns:</span></dt><dd>the registrator object</dd></dl>
</li>
</ul>
<a name="delete(se.mediasense.distribution.UCI)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>delete</h4>
<pre>public&nbsp;se.mediasense.distribution.Deleter&nbsp;delete(se.mediasense.distribution.UCI&nbsp;uci)</pre>
<div class="block">The DELETE action, which deletes an UCI <p>This call is asynchronous or synchronous.
 <p>This method assumes that the resources is owned by the local
 <code>MediaSenseHost</code></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>uci</code> - - the UCI to be registered</dd>
<dt><span class="strong">Returns:</span></dt><dd>the deleter object</dd></dl>
</li>
</ul>
<a name="update(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>update</h4>
<pre>public&nbsp;se.mediasense.distribution.Updater&nbsp;update(java.lang.String&nbsp;uci)</pre>
<div class="block">The Update action, which updates an UCI which can later be
 resolved and found by other MediaSenseHosts <p>This call is asynchronous or synchronous.
 <p>This method assumes that the resources is owned by the local
 <code>MediaSenseHost</code></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>uci</code> - - the UCI to be registered</dd>
<dt><span class="strong">Returns:</span></dt><dd>the updater object</dd></dl>
</li>
</ul>
<a name="get(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;se.mediasense.distribution.Getter&nbsp;get(java.lang.String&nbsp;uci)</pre>
<div class="block">The GET primitive action, which fetches the value from another entity.
 <p>This call is asynchronous or synchronous.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>uci</code> - the UCI to be fetched</dd>
<dt><span class="strong">Returns:</span></dt><dd>the getter object</dd></dl>
</li>
</ul>
<a name="get(se.mediasense.distribution.UCI)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;se.mediasense.distribution.Getter&nbsp;get(se.mediasense.distribution.UCI&nbsp;uci)</pre>
<div class="block">The GET primitive action, which fetches the value from another entity.
 <p>This call is asynchronous or synchronous.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>uci</code> - the UCI to be fetched</dd>
<dt><span class="strong">Returns:</span></dt><dd>the getter object</dd></dl>
</li>
</ul>
<a name="set(se.mediasense.distribution.UCI, java.io.Serializable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>set</h4>
<pre>public&nbsp;void&nbsp;set(se.mediasense.distribution.UCI&nbsp;uci,
       java.io.Serializable&nbsp;value)
         throws se.mediasense.disseminationlayer.communication.DestinationNotReachableException</pre>
<div class="block">The SET primitive action, which fetches the value from another entity.
 <p>This call is asynchronous or synchronous.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>uci</code> - the UCI to be set</dd><dd><code>value</code> - the value to be set</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code>se.mediasense.disseminationlayer.communication.DestinationNotReachableException</code></dd></dl>
</li>
</ul>
<a name="notify(se.mediasense.distribution.UCI, java.io.Serializable, se.mediasense.disseminationlayer.communication.MediaSenseHost)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>notify</h4>
<pre>public&nbsp;void&nbsp;notify(se.mediasense.distribution.UCI&nbsp;uci,
          java.io.Serializable&nbsp;value,
          se.mediasense.disseminationlayer.communication.MediaSenseHost&nbsp;destination)
            throws se.mediasense.disseminationlayer.communication.DestinationNotReachableException</pre>
<div class="block">The NOTIFY primitive action, which sends a value back to a previously
 asking entity
 <p>This call is asynchronous or synchronous.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>uci</code> - the UCI of the <code>java.io.Serilizable</code>value</dd><dd><code>value</code> - the <code>java.io.Serilizable</code> that should be sent in
 response the <code>GetMessage</code></dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code>se.mediasense.disseminationlayer.communication.DestinationNotReachableException</code></dd></dl>
</li>
</ul>
<a name="registerListener(java.lang.String, se.mediasense.messages.MediaSenseListener)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>registerListener</h4>
<pre>public&nbsp;void&nbsp;registerListener(java.lang.String&nbsp;msgtype,
                    se.mediasense.messages.MediaSenseListener&nbsp;listener)</pre>
<div class="block">Registers an event listener with the API. <p>This listener must implement
 the <code>MediaSenseListener</code> interface <p>This
 overrides the default listener for this type of message. If a listener is
 specified, the default listener will no longer receive messages for the
 specified message type.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>msgtype</code> - the message type which the value should be sent to</dd><dd><code>listener</code> - the <code>MediaSenseListener</code>
 that should be notified of the messages</dd></dl>
</li>
</ul>
<a name="removeListener(java.lang.String, se.mediasense.messages.MediaSenseListener)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>removeListener</h4>
<pre>public&nbsp;void&nbsp;removeListener(java.lang.String&nbsp;msgtype,
                  se.mediasense.messages.MediaSenseListener&nbsp;listener)</pre>
<div class="block">Removes or de-registers an event listener with the API. <p>This listener
 must implement the <code>MediaSenseListener</code>
 interface <p>If no listener is specified for this type of
 <code>MediaSenseMessage</code> then the event defaults
 back to the default listener specified in
 <code>MediaSensePlatform</code></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>msgtype</code> - the message type which the value should be sent to</dd><dd><code>listener</code> - the <code>MediaSenseListener</code>
 that should be removed for this type message</dd></dl>
</li>
</ul>
<a name="sendMessage(se.mediasense.messages.MediaSenseMessage)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sendMessage</h4>
<pre>public&nbsp;void&nbsp;sendMessage(se.mediasense.messages.MediaSenseMessage&nbsp;msg)
                 throws se.mediasense.disseminationlayer.communication.DestinationNotReachableException</pre>
<div class="block">Sends a <code>MediaSenseMessage</code> using the
 generic messaging interface. <p>The message is dispatched in accordance
 to the underlaying communication protocol to a
 <code>MediaSenseHost</code> and
 is received in the first instance by the
 <code>MediaSenseListener</code> on the remote
 <code>MediaSenseHost</code>
 registered for this message type. <p>If no
 <code>MediaSenseListener</code> is specified for this
 type of message then it is delivered to the default
 <code>MediaSenseListener</code> specified in
 <code>MediaSensePlatform</code></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>msg</code> - the message to be delivered</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code>se.mediasense.disseminationlayer.communication.DestinationNotReachableException</code></dd></dl>
</li>
</ul>
<a name="getLocalHost()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getLocalHost</h4>
<pre>public&nbsp;se.mediasense.disseminationlayer.communication.MediaSenseHost&nbsp;getLocalHost()</pre>
<div class="block">Returns the localhost This is implementation specific, however for most
 cases, the getHostID is sufficient identification for the host. However,
 the entire object must be used for transactions.</div>
<dl><dt><span class="strong">Returns:</span></dt><dd><code>MediaSenseHost</code></dd></dl>
</li>
</ul>
<a name="main(java.lang.String[])">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>main</h4>
<pre>public static&nbsp;void&nbsp;main(java.lang.String[]&nbsp;args)</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../se/mediasense/interfacelayer/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/MediaSensePlatform.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../se/mediasense/interfacelayer/MediaSenseApplication.html" title="class in se.mediasense.interfacelayer"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../se/mediasense/interfacelayer/Persistence.html" title="class in se.mediasense.interfacelayer"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?se/mediasense/interfacelayer/MediaSensePlatform.html" target="_top">Frames</a></li>
<li><a href="MediaSensePlatform.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
